## Student Name: Lara Novic
## Date: 10/15/2017
## Homework 2, Problem 1, Methods in Computational Linguistics I, Fall 2017
## Chapter 5, Programming Exercise 4 (page 171) "Acronyms"
##
## What Does this Program Do:
## This is a program that turns a phrase
## into an acronym
## 
## Input:
## Phrase

def make_acronym():
    ## print introduction
    print("This is a program that turns a phrase")
    print("into an acronym.")
    ## print blank space
    print("")
    ## print phrases to be turned into acronyms
    print("For the following phrases:")
    phrase_1=("   random access memory")
    phrase_2=("   information technology")
    phrase_3=("   graphics interchange format")
    phrase_4=("   structured query language")
    
    print(phrase_1)
    print(phrase_2)
    print(phrase_3)
    print(phrase_4)
    
    ## convert phrases into acronyms
    words_1=phrase_1.split() ## separates phrase into items
    first_letters_1 = [item [0] for item in words_1] ## loop to pick out first letter of each word
    joined_letters_1 = "".join(first_letters_1) ## combine first letters
    capitalized_1 = joined_letters_1.upper()  ## capitalize
    
    words_2=phrase_2.split()
    first_letters_2 = [item [0] for item in words_2]
    joined_letters_2 = "".join(first_letters_2)
    capitalized_2 = joined_letters_2.upper()
    
    words_3=phrase_3.split()
    first_letters_3 = [item [0] for item in words_3]
    joined_letters_3 = "".join(first_letters_3)
    capitalized_3 = joined_letters_3.upper()
    
    words_4=phrase_4.split()
    first_letters_4 = [item [0] for item in words_4]
    joined_letters_4 = "".join(first_letters_4)
    capitalized_4 = joined_letters_4.upper()
    
    ## print acronyms
    print("")
    print("The acronyms are:")
    print("  ",capitalized_1)
    print("  ",capitalized_2)
    print("  ",capitalized_3)
    print("  ",capitalized_4)
    
## call program to run it:
make_acronym()


## Student Name: Lara Novic
## Date: 10/15/2017
## Homework 2, Problem 2, Methods in Computational Linguistics I, Fall 2017
## Chapter 5, Programming Exercise 14 (page 173) "Word Count"
##
## What Does this Program Do:
## This is a program that calculates a text file's
## line count, word count and character count
## 
## Input:
## .txt file

def get_count1():
    print("This program calculates a text file's")
    print("line count, word count and character count.")
    print("")
    
    file_path="sample1.txt"
    fopen=open(file_path)
    content=fopen.read() ## pull content using "read"
    
    lines = fopen.readlines()
    fopen.close()
    split_content=content.split()
    
    ## find line count adapted from
    ## https://stackoverflow.com/questions/845058/how-to-get-line-count-cheaply-in-python
    num_of_lines = 1 + open('sample1.txt').read().count('\n')
    print("Lines in text file:", num_of_lines)
    
    num_of_words = len(split_content)
    print("Words in text file:", num_of_words)
    
    num_of_chara = len(content)
    print("Characters in text file:", num_of_chara)

## run program on sample1.txt
get_count1()

def get_count2():
    print("This program calculates a text file's")
    print("line count, word count and character count.")
    print("")
    
    file_path="sample2.txt"
    fopen=open(file_path)
    content=fopen.read() ## pull content using "read"
    
    lines = fopen.readlines()
    fopen.close()
    split_content=content.split()
    
    num_of_lines = 1 + open('sample2.txt').read().count('\n')
    print("Lines in text file:", num_of_lines)
    
    num_of_words = len(split_content)
    print("Words in text file:", num_of_words)
    
    num_of_chara = len(content)
    print("Characters in text file:", num_of_chara)
    
## run program on sample2.txt
get_count2()


## Student Name: Lara Novic
## Date: 10/15/2017
## Homework 2, Problem 3, Methods in Computational Linguistics I, Fall 2017
## Problem 3 : Chapter 7, Programming Exercise 6 (page 239) "Speed Limit"
##
## What Does this Program Do:
## This is a program that accepts a speed limit and clocked speed
## and prints a message with a fine, if speed is illegal
## or a message indicating speed is legal.
## 
## Input:
## speed limit, clocked speed


print("This program indicates whether a speed is legal")
print("or prints a fine if the speed is illegal")
print("")

def speeding_ticket1():
    speed_limit = 25
    clocked_speed = 34
    if clocked_speed > speed_limit:
        fine = (clocked_speed - speed_limit) * 5 + 50
        if clocked_speed > 90:
            fine = fine + 200
        print ("You have to pay a fine of: $"+str(fine))
    else:
        print ("Legal speed")
        
def speeding_ticket2():
    speed_limit = 25
    clocked_speed = 25
    if clocked_speed > speed_limit:
        fine = (clocked_speed - speed_limit) * 5 + 50
        if clocked_speed > 90:
            fine = fine + 200
        print ("You have to pay a fine of: $"+str(fine))
    else:
        print ("Legal speed")

def speeding_ticket3():
    speed_limit = 60
    clocked_speed = 93
    if clocked_speed > speed_limit:
        fine = (clocked_speed - speed_limit) * 5 + 50
        if clocked_speed > 90:
            fine = fine + 200
        print ("You have to pay a fine of: $"+str(fine))
    else:
        print ("Legal speed")
        
## run
speeding_ticket1()
speeding_ticket2()
speeding_ticket3()


## Student Name: Lara Novic
## Date: 10/15/2017
## Homework 2, Problem 4, Methods in Computational Linguistics I, Fall 2017
## Chapter 7, Programming Exercise 12 (page 240) "Valid or Invalid Dates"
##
## What Does this Program Do:
## This is a program that identifies
## whether a date is valid
## 
## Input:
## month, date, year

print ("Is the date valid?")
print ("")

def check_valid_date1():
    date_str="6/24/1989"
    split_date=date_str.split("/")

    if len(split_date)==3:
        date_split_int=[int(item) for item in split_date]
        month,day,year=date_split_int
        
## leap year code adapted from:
## https://stackoverflow.com/questions/11621740/how-to-determine-whether-a-year-is-a-leap-year-in-python
    leap_year=False
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): leap_year=True
        
## check February
    if month==2:
            if month==2 and day==29 and leap_year:
                print(date_str, "is a valid date for February (leap year).")
            else:
                print(date_str, "is an invalid date.")
    elif month > 12:
        print (date_str,"is an invalid date. Max number of months is 12.")
    elif month in (4, 6, 9, 11) and day > 30:
            print(date_str, "is an invalid date. This is a 30-day month.")
    elif month in (1, 3, 5, 7, 8, 10, 12) and day > 31:
            print(date_str, "is an invalid date. This is a 31-day month.")
    else:
        print (date_str, "is a valid date.")

def check_valid_date2():
    date_str="2/29/2000"
    split_date=date_str.split("/")

    if len(split_date)==3:
        date_split_int=[int(item) for item in split_date]
        month,day,year=date_split_int

    leap_year=False
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): leap_year=True

    if month==2:
            if month==2 and day==29 and leap_year:
                print(date_str, "is a valid date for February (leap year).")
            else:
                print(date_str, "is an invalid date.")
    elif month > 12:
        print (date_str,"is an invalid date. Max number of months is 12.")
    elif month in (4, 6, 9, 11) and day > 30:
            print(date_str, "is an invalid date. This is a 30-day month.")
    elif month in (1, 3, 5, 7, 8, 10, 12) and day > 31:
            print(date_str, "is an invalid date. This is a 31-day month.")
    else:
        print (date_str, "is a valid date.")

def check_valid_date3():
    date_str="3/29/1960"
    split_date=date_str.split("/")

    if len(split_date)==3:
        date_split_int=[int(item) for item in split_date]
        month,day,year=date_split_int

    leap_year=False
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): leap_year=True

    if month==2:
            if month==2 and day==29 and leap_year:
                print(date_str, "is a valid date for February (leap year).")
            else:
                print(date_str, "is an invalid date.")
    elif month > 12:
        print (date_str,"is an invalid date. Max number of months is 12.")
    elif month in (4, 6, 9, 11) and day > 30:
            print(date_str, "is an invalid date. This is a 30-day month.")
    elif month in (1, 3, 5, 7, 8, 10, 12) and day > 31:
            print(date_str, "is an invalid date. This is a 31-day month.")
    else:
        print (date_str, "is a valid date.")
        
def check_valid_date4():
    date_str="11/39/1985"
    split_date=date_str.split("/")

    if len(split_date)==3:
        date_split_int=[int(item) for item in split_date]
        month,day,year=date_split_int

    leap_year=False
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): leap_year=True

    if month==2:
            if month==2 and day==29 and leap_year:
                print(date_str, "is a valid date for February (leap year).")
            else:
                print(date_str, "is an invalid date.")
    elif month > 12:
        print (date_str,"is an invalid date. Max number of months is 12.")
    elif month in (4, 6, 9, 11) and day > 30:
            print(date_str, "is an invalid date. This is a 30-day month.")
    elif month in (1, 3, 5, 7, 8, 10, 12) and day > 31:
            print(date_str, "is an invalid date. This is a 31-day month.")
    else:
        print (date_str, "is a valid date")

def check_valid_date5():
    date_str="2/29/1900"
    split_date=date_str.split("/")

    if len(split_date)==3:
        date_split_int=[int(item) for item in split_date]
        month,day,year=date_split_int

    leap_year=False
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): leap_year=True

    if month==2:
            if month==2 and day==29 and leap_year:
                print(date_str, "is a valid date for February (leap year).")
            else:
                print(date_str, "is an invalid date.")
    elif month > 12:
        print (date_str,"is an invalid date. Max number of months is 12.")
    elif month in (4, 6, 9, 11) and day > 30:
            print(date_str, "is an invalid date. This is a 30-day month.")
    elif month in (1, 3, 5, 7, 8, 10, 12) and day > 31:
            print(date_str, "is an invalid date. This is a 31-day month.")
    else:
        print (date_str, "is a valid date.")

def check_valid_date6():
    date_str="15/14/1912"
    split_date=date_str.split("/")

    if len(split_date)==3:
        date_split_int=[int(item) for item in split_date]
        month,day,year=date_split_int

    leap_year=False
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): leap_year=True

    if month==2:
            if month==2 and day==29 and leap_year:
                print(date_str, "is a valid date for February (leap year).")
            else:
                print(date_str, "is an invalid date.")
    elif month > 12:
        print (date_str,"is an invalid date. Max number of months is 12.")
    elif month in (4, 6, 9, 11) and day > 30:
            print(date_str, "is an invalid date. This is a 30-day month.")
    elif month in (1, 3, 5, 7, 8, 10, 12) and day > 31:
            print(date_str, "is an invalid date. This is a 31-day month.")
    else:
        print (date_str, "is a valid date.")
        
## check 6 dates
check_valid_date1()
check_valid_date2()
check_valid_date3()
check_valid_date4()
check_valid_date5()
check_valid_date6()


## Student Name: Lara Novic
## Date: 10/15/2017
## Homework 2, Problem 5, Methods in Computational Linguistics I, Fall 2017
## Chapter 4, Programming Exercise 9 (page 127) "Rectangle Information"
##
## What Does this Program Do:
## This program finds area and perimeter
## of user-drawn rectangle
## 
## Input:
## points

import graphics
from graphics import *

def rectangle_info():
    win = GraphWin("Click on two points to create a rectangle", 300, 300)
    p1 = win.getMouse()
    p1.draw(win)
    p2 = win.getMouse()
    p2.draw(win)
    Rectangle(p1, p2).draw(win)

    width = abs(p2.getX() - p1.getX())
    height = abs(p2.getY() - p1.getY())

    area = width * height
    perimeter = 2 * (width + height)

    print ("Area of user-drawn rectangle:",area,"square pixels")
    print ("Perimeter of user-drawn rectangle:",perimeter,"pixels")

# run
rectangle_info()
